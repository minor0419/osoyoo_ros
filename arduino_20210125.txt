#include <WiFiEsp.h>
#include <WiFiEspClient.h>
#include <WiFiEspServer.h>
#include <WiFiEspUdp.h>

/*  ___   ___  ___  _   _  ___   ___   ____ ___  ____
   / _ \ /___)/ _ \| | | |/ _ \ / _ \ / ___) _ \|    \
  | |_| |___ | |_| | |_| | |_| | |_| ( (__| |_| | | | |
   \___/(___/ \___/ \__  |\___/ \___(_)____)___/|_|_|_|
                    (____/
   Arduino Mecanum Omni Direction Wheel Robot Car Lesson5 Wifi Control
   Tutorial URL http://osoyoo.com/?p=30176
   CopyRight www.osoyoo.com

*/
#define SPEED 85
#define TURN_SPEED 90
#define SHIFT_SPEED 130

#define TURN_TIME 500
#define MOVE_TIME 500

#define speedPinR 9   //  RIGHT WHEEL PWM pin D45 connect front MODEL-X ENA 
#define RightMotorDirPin1  22    //Front Right Motor direction pin 1 to Front MODEL-X IN1  (K1)
#define RightMotorDirPin2  24   //Front Right Motor direction pin 2 to Front MODEL-X IN2   (K1)                                 
#define LeftMotorDirPin1  26    //Left front Motor direction pin 1 to Front MODEL-X IN3 (  K3)
#define LeftMotorDirPin2  28   //Left front Motor direction pin 2 to Front MODEL-X IN4 (  K3)
#define speedPinL 10   // Left WHEEL PWM pin D7 connect front MODEL-X ENB

#define speedPinRB 11   //  RIGHT WHEEL PWM pin connect Back MODEL-X ENA 
#define RightMotorDirPin1B  5    //Rear Right Motor direction pin 1 to Back MODEL-X IN1 (  K1)
#define RightMotorDirPin2B 6    //Rear Right Motor direction pin 2 to Back MODEL-X IN2 (  K1) 
#define LeftMotorDirPin1B 7    //Rear left Motor direction pin 1 to Back MODEL-X IN3  K3
#define LeftMotorDirPin2B 8  //Rear left Motor direction pin 2 to Back MODEL-X IN4  k3
#define speedPinLB 12    //   LEFT WHEEL  PWM pin D8 connect Rear MODEL-X ENB
/*motor control*/
void right_shift(int speed_fl_fwd, int speed_rl_bck , int speed_rr_fwd, int speed_fr_bck) {
  FL_fwd(speed_fl_fwd);
  RL_bck(speed_rl_bck);
  FR_bck(speed_fr_bck);
  RR_fwd(speed_rr_fwd);
  ;
}
void left_shift(int speed_fl_bck, int speed_rl_fwd , int speed_rr_bck, int speed_fr_fwd) {
  FL_bck(speed_fl_bck);
  RL_fwd(speed_rl_fwd);
  FR_fwd(speed_fr_fwd);
  RR_bck(speed_rr_bck);

}
void go_advance(int speed) {
  RL_fwd(speed);
  RR_fwd(speed);
  FR_fwd(speed);
  FL_fwd(speed);
}
void  go_back(int speed) {
  RL_bck(speed);
  RR_bck(speed);
  FR_bck(speed);
  FL_bck(speed);
}
void left_turn(int speed) {
  RL_bck(0);
  RR_fwd(speed);
  FR_fwd(speed);
  FL_bck(0);
}
void right_turn(int speed) {
  RL_fwd(speed);
  RR_bck(0);
  FR_bck(0);
  FL_fwd(speed);
}
void left_back(int speed) {
  RL_fwd(0);
  RR_bck(speed);
  FR_bck(speed);
  FL_fwd(0);
}
void right_back(int speed) {
  RL_bck(speed);
  RR_fwd(0);
  FR_fwd(0);
  FL_bck(speed);
}

void clockwise(int speed) {
  RL_fwd(speed);
  RR_bck(speed);
  FR_bck(speed);
  FL_fwd(speed);
}
void countclockwise(int speed) {
  RL_bck(speed);
  RR_fwd(speed);
  FR_fwd(speed);
  FL_bck(speed);
}
void FR_bck(int speed)  //front-right wheel forward turn
{
  digitalWrite(RightMotorDirPin1, LOW);
  digitalWrite(RightMotorDirPin2, HIGH);
  analogWrite(speedPinR, speed);
}
void FR_fwd(int speed) // front-right wheel backward turn
{
  digitalWrite(RightMotorDirPin1, HIGH);
  digitalWrite(RightMotorDirPin2, LOW);
  analogWrite(speedPinR, speed);
}
void FL_bck(int speed) // front-left wheel forward turn
{
  digitalWrite(LeftMotorDirPin1, LOW);
  digitalWrite(LeftMotorDirPin2, HIGH);
  analogWrite(speedPinL, speed);
}
void FL_fwd(int speed) // front-left wheel backward turn
{
  digitalWrite(LeftMotorDirPin1, HIGH);
  digitalWrite(LeftMotorDirPin2, LOW);
  analogWrite(speedPinL, speed);
}

void RR_bck(int speed)  //rear-right wheel forward turn
{
  digitalWrite(RightMotorDirPin1B, LOW);
  digitalWrite(RightMotorDirPin2B, HIGH);
  analogWrite(speedPinRB, speed);
}
void RR_fwd(int speed)  //rear-right wheel backward turn
{
  digitalWrite(RightMotorDirPin1B, HIGH);
  digitalWrite(RightMotorDirPin2B, LOW);
  analogWrite(speedPinRB, speed);
}
void RL_bck(int speed)  //rear-left wheel forward turn
{
  digitalWrite(LeftMotorDirPin1B, LOW);
  digitalWrite(LeftMotorDirPin2B, HIGH);
  analogWrite(speedPinLB, speed);
}
void RL_fwd(int speed)    //rear-left wheel backward turn
{
  digitalWrite(LeftMotorDirPin1B, HIGH);
  digitalWrite(LeftMotorDirPin2B, LOW);
  analogWrite(speedPinLB, speed);
}


void stop_Stop()    //Stop
{
  analogWrite(speedPinLB, 0);
  analogWrite(speedPinRB, 0);
  analogWrite(speedPinL, 0);
  analogWrite(speedPinR, 0);
}


//Pins initialize
void init_GPIO()
{
  pinMode(RightMotorDirPin1, OUTPUT);
  pinMode(RightMotorDirPin2, OUTPUT);
  pinMode(speedPinL, OUTPUT);

  pinMode(LeftMotorDirPin1, OUTPUT);
  pinMode(LeftMotorDirPin2, OUTPUT);
  pinMode(speedPinR, OUTPUT);
  pinMode(RightMotorDirPin1B, OUTPUT);
  pinMode(RightMotorDirPin2B, OUTPUT);
  pinMode(speedPinLB, OUTPUT);

  pinMode(LeftMotorDirPin1B, OUTPUT);
  pinMode(LeftMotorDirPin2B, OUTPUT);
  pinMode(speedPinRB, OUTPUT);

  stop_Stop();
}
#include "WiFiEsp.h"
#include "WiFiEspClient.h"
#include "WiFiEspServer.h"
#include <ros.h>
#include <std_msgs/Int16MultiArray.h>
#include <std_msgs/Int16.h>

char ssid[] = "aterm-ed3780-g";
unsigned long recv_cnt = 0;

int status = WL_IDLE_STATUS;
// use a ring buffer to increase speed and reduce memory allocation
unsigned int localPort = 11411;  // local port to listen on
int Arr[4];
unsigned long watch_dog;

IPAddress server(192, 168, 1, 2); // e.g.: IPAddress server(192, 168, 1, 3);
IPAddress local(192, 168, 1, 1); // e.g.: IPAddress server(192, 168, 1, 3);
const uint16_t serverPort = 11411;
WiFiEspClass wlan;
WiFiEspClient client;
void controlCallback( const std_msgs::Int16MultiArray& msg);
ros::Subscriber<std_msgs::Int16MultiArray> sub("servo_controls", &controlCallback );


class WiFiHardware {
  public:
    WiFiHardware() {};

    void init() {
      //client.connect("192.168.1.2", 11411);
    }

    int read() {
      //Serial.println("Read WiFiHardware.");
      return client.read();
    }

    void write(uint8_t* data, int length) {
      Serial.print(length, DEC);
      Serial.println(" Write WiFiHardware.");
      if (client.connected())
        client.write(data, length);
      //for (int i = 0; i < length; i++)
      //  client.write(data[i]);
    }

    void send(uint8_t* data, int length) {
      Serial.println("Write WiFiHardware2.");
      for (int i = 0; i < length; i++)
        client.write(data[i]);
    }

    unsigned long time() {
      return millis();
    }
};
ros::NodeHandle_<WiFiHardware, 2, 2, 1000, 1000> nh;

void controlCallback( const std_msgs::Int16MultiArray& msg)
{
  recv_cnt++;
  watch_dog = millis();
  Serial.print(recv_cnt, DEC);
  Serial.println(" Recieve Topic.");
  for (int i = 0; i < 4; ++i)
  {
    Arr[i] = msg.data[i];
  }
  if (Arr[0] >= 0)
    FR_fwd(Arr[0]);
  else
    FR_bck(abs(Arr[0]));

  if (Arr[1] >= 0)
    FL_fwd(Arr[1]);
  else
    FL_bck(abs(Arr[1]));

  if (Arr[2] >= 0)
    RR_fwd(Arr[2]);
  else
    RR_bck(abs(Arr[2]));

  if (Arr[3] >= 0)
    RL_fwd(Arr[3]);
  else
    RL_bck(abs(Arr[3]));
}

void setup()
{
  init_GPIO();

  Serial.println("Initialize WiFiHardware.");
  Serial.begin(9600);   // initialize serial for debugging
  Serial1.begin(115200);
  Serial1.write("AT+UART_DEF=9600,8,1,0,0\r\n");
  delay(200);
  Serial1.write("AT+RST\r\n");
  delay(200);
  Serial1.begin(9600);    // initialize serial for ESP module
  WiFi.init(&Serial1);    // initialize ESP module
  WiFi.config(local);
  Serial.println(ssid);
  wlan.begin(ssid, "");
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }
  client.connect("192.168.1.2", 11411);


  while (client.status() == WL_DISCONNECTED)
  {
    Serial.print("+");
    delay(100);
  }

  Serial.println("You're connected to the network");
  //printWifiStatus();

  Serial.print("Listening on port ");
  Serial.println(localPort);
  Serial.println(" connected");
  delay(1000);

  nh.initNode();
  nh.subscribe(sub);

}


void loop()
{
  if (!client.connected())
  {
    client.connect("192.168.1.2", 11411);
    delay(500);
  }

  if ((millis() - watch_dog) > 1500)
    stop_Stop();

  nh.spinOnce();
  delay(10);
}