/*  ___   ___  ___  _   _  ___   ___   ____ ___  ____
   / _ \ /___)/ _ \| | | |/ _ \ / _ \ / ___) _ \|    \
  | |_| |___ | |_| | |_| | |_| | |_| ( (__| |_| | | | |
   \___/(___/ \___/ \__  |\___/ \___(_)____)___/|_|_|_|
                    (____/
   Arduino Mecanum Omni Direction Wheel Robot Car Lesson5 Wifi Control
   Tutorial URL http://osoyoo.com/?p=30176
   CopyRight www.osoyoo.com

*/
#define ENC1A 30
#define ENC1B 32
#define ENC2A 31
#define ENC2B 33
#define ENC3A 34
#define ENC3B 36
#define ENC4A 35
#define ENC4B 37

#define SAMPLE_TIME  1

#define GAIN_KP1     100.0
#define GAIN_KI1     0.01
#define GAIN_KD1     100.0
#define GAIN_KP2     100.0
#define GAIN_KI2     0.01
#define GAIN_KD2     100.0
#define GAIN_KP3     100.0
#define GAIN_KI3     0.01
#define GAIN_KD3     100.0
#define GAIN_KP4     100.0
#define GAIN_KI4     0.01
#define GAIN_KD4     100.0

#define SPEED_CMD1   1
#define SPEED_CMD2   1
#define SPEED_CMD3   1
#define SPEED_CMD4   1

#define SPEED_COUNT  100

#define SPEED 85
#define TURN_SPEED 90
#define SHIFT_SPEED 130

#define TURN_TIME 500
#define MOVE_TIME 500

#define speedPinR 5   //  RIGHT WHEEL PWM pin D45 connect front MODEL-X ENA 
#define RightMotorDirPin1  22    //Front Right Motor direction pin 1 to Front MODEL-X IN1  (K1)
#define RightMotorDirPin2  24   //Front Right Motor direction pin 2 to Front MODEL-X IN2   (K1)                                 
#define LeftMotorDirPin1  26    //Left front Motor direction pin 1 to Front MODEL-X IN3 (  K3)
#define LeftMotorDirPin2  28   //Left front Motor direction pin 2 to Front MODEL-X IN4 (  K3)
//#define speedPinL 10   // Left WHEEL PWM pin D7 connect front MODEL-X ENB
#define speedPinL 6   // Left WHEEL PWM pin D7 connect front MODEL-X ENB

//#define speedPinRB 11   //  RIGHT WHEEL PWM pin connect Back MODEL-X ENA
//#define speedPinRB 3   //  RIGHT WHEEL PWM pin connect Back MODEL-X ENA
#define speedPinRB 7   //  RIGHT WHEEL PWM pin connect Back MODEL-X ENA 
#define RightMotorDirPin1B  23    //Rear Right Motor direction pin 1 to Back MODEL-X IN1 (  K1)
#define RightMotorDirPin2B 25    //Rear Right Motor direction pin 2 to Back MODEL-X IN2 (  K1) 
#define LeftMotorDirPin1B 27    //Rear left Motor direction pin 1 to Back MODEL-X IN3  K3
#define LeftMotorDirPin2B 39  //Rear left Motor direction pin 2 to Back MODEL-X IN4  k3
//#define speedPinLB 12    //   LEFT WHEEL  PWM pin D8 connect Rear MODEL-X ENB
#define speedPinLB 8   //   LEFT WHEEL  PWM pin D8 connect Rear MODEL-X ENB
/*motor control*/
void right_shift(int speed_fl_fwd, int speed_rl_bck , int speed_rr_fwd, int speed_fr_bck) {
  FL_fwd(speed_fl_fwd);
  RL_bck(speed_rl_bck);
  FR_bck(speed_fr_bck);
  RR_fwd(speed_rr_fwd);
  ;
}
void left_shift(int speed_fl_bck, int speed_rl_fwd , int speed_rr_bck, int speed_fr_fwd) {
  FL_bck(speed_fl_bck);
  RL_fwd(speed_rl_fwd);
  FR_fwd(speed_fr_fwd);
  RR_bck(speed_rr_bck);

}
void go_advance(int speed) {
  RL_fwd(speed);
  RR_fwd(speed);
  FR_fwd(speed);
  FL_fwd(speed);
}
void  go_back(int speed) {
  RL_bck(speed);
  RR_bck(speed);
  FR_bck(speed);
  FL_bck(speed);
}
void left_turn(int speed) {
  RL_bck(0);
  RR_fwd(speed);
  FR_fwd(speed);
  FL_bck(0);
}
void right_turn(int speed) {
  RL_fwd(speed);
  RR_bck(0);
  FR_bck(0);
  FL_fwd(speed);
}
void left_back(int speed) {
  RL_fwd(0);
  RR_bck(speed);
  FR_bck(speed);
  FL_fwd(0);
}
void right_back(int speed) {
  RL_bck(speed);
  RR_fwd(0);
  FR_fwd(0);
  FL_bck(speed);
}

void clockwise(int speed) {
  RL_fwd(speed);
  RR_bck(speed);
  FR_bck(speed);
  FL_fwd(speed);
}
void countclockwise(int speed) {
  RL_bck(speed);
  RR_fwd(speed);
  FR_fwd(speed);
  FL_bck(speed);
}
void FR_bck(int speed)  //front-right wheel forward turn
{
  digitalWrite(RightMotorDirPin1, LOW);
  digitalWrite(RightMotorDirPin2, HIGH);
  analogWrite(speedPinR, speed);
}
void FR_fwd(int speed) // front-right wheel backward turn
{
  digitalWrite(RightMotorDirPin1, HIGH);
  digitalWrite(RightMotorDirPin2, LOW);
  analogWrite(speedPinR, speed);
}
void FL_bck(int speed) // front-left wheel forward turn
{
  digitalWrite(LeftMotorDirPin1, LOW);
  digitalWrite(LeftMotorDirPin2, HIGH);
  analogWrite(speedPinL, speed);
}
void FL_fwd(int speed) // front-left wheel backward turn
{
  digitalWrite(LeftMotorDirPin1, HIGH);
  digitalWrite(LeftMotorDirPin2, LOW);
  analogWrite(speedPinL, speed);
}

void RR_bck(int speed)  //rear-right wheel forward turn
{
  digitalWrite(RightMotorDirPin1B, LOW);
  digitalWrite(RightMotorDirPin2B, HIGH);
  analogWrite(speedPinRB, speed);
}
void RR_fwd(int speed)  //rear-right wheel backward turn
{
  digitalWrite(RightMotorDirPin1B, HIGH);
  digitalWrite(RightMotorDirPin2B, LOW);
  analogWrite(speedPinRB, speed);
}
void RL_bck(int speed)  //rear-left wheel forward turn
{
  digitalWrite(LeftMotorDirPin1B, LOW);
  digitalWrite(LeftMotorDirPin2B, HIGH);
  analogWrite(speedPinLB, speed);
}
void RL_fwd(int speed)    //rear-left wheel backward turn
{
  digitalWrite(LeftMotorDirPin1B, HIGH);
  digitalWrite(LeftMotorDirPin2B, LOW);
  analogWrite(speedPinLB, speed);
}


void stop_Stop()    //Stop
{
  analogWrite(speedPinLB, 0);
  analogWrite(speedPinRB, 0);
  analogWrite(speedPinL, 0);
  analogWrite(speedPinR, 0);
}


//Pins initialize
void init_GPIO()
{
  pinMode(RightMotorDirPin1, OUTPUT);
  pinMode(RightMotorDirPin2, OUTPUT);
  pinMode(speedPinL, OUTPUT);

  pinMode(LeftMotorDirPin1, OUTPUT);
  pinMode(LeftMotorDirPin2, OUTPUT);
  pinMode(speedPinR, OUTPUT);
  pinMode(RightMotorDirPin1B, OUTPUT);
  pinMode(RightMotorDirPin2B, OUTPUT);
  pinMode(speedPinLB, OUTPUT);

  pinMode(LeftMotorDirPin1B, OUTPUT);
  pinMode(LeftMotorDirPin2B, OUTPUT);
  pinMode(speedPinRB, OUTPUT);

  stop_Stop();
  pinMode(ENC1A, INPUT);
  pinMode(ENC1B, INPUT);
  pinMode(ENC2A, INPUT);
  pinMode(ENC2B, INPUT);
  pinMode(ENC3A, INPUT);
  pinMode(ENC3B, INPUT);
  pinMode(ENC4A, INPUT);
  pinMode(ENC4B, INPUT);
}

#include <SPI.h>
#include <Ethernet.h>
#define ROSSERIAL_ARDUINO_TCP
#include <ros.h>
#include <std_msgs/Int16MultiArray.h>
#include <std_msgs/Int16.h>
#include <MsTimer2.h>
#include <PID_v2.h>

int int_count = 0;
int counter1 = 0;
int counter1_last = 0;
int aState1;
int bState1;
int aLastState1;
int speed1;
int speed1_sum = 0;
int speed1_rpm;

int counter2 = 0;
int counter2_last = 0;
int aState2;
int bState2;
int aLastState2;
int speed2;
int speed2_sum = 0;
int speed2_rpm;

int counter3 = 0;
int counter3_last = 0;
int aState3;
int bState3;
int aLastState3;
int speed3;
int speed3_sum = 0;
int speed3_rpm;

int counter4 = 0;
int counter4_last = 0;
int aState4;
int bState4;
int aLastState4;
int speed4;
int speed4_sum = 0;
int speed4_rpm;

double Setpoint1, Input1, Output1;
double Setpoint2, Input2, Output2;
double Setpoint3, Input3, Output3;
double Setpoint4, Input4, Output4;

double Kp1 = GAIN_KP1, Ki1 = GAIN_KI1, Kd1 = GAIN_KD1;
double Kp2 = GAIN_KP2, Ki2 = GAIN_KI2, Kd2 = GAIN_KD2;
double Kp3 = GAIN_KP3, Ki3 = GAIN_KI3, Kd3 = GAIN_KD3;
double Kp4 = GAIN_KP4, Ki4 = GAIN_KI4, Kd4 = GAIN_KD4;

PID_v2 myPID1(Kp1, Ki1, Kd1, PID::Direct);
PID_v2 myPID2(Kp2, Ki2, Kd2, PID::Direct);
PID_v2 myPID3(Kp3, Ki3, Kd3, PID::Direct);
PID_v2 myPID4(Kp4, Ki4, Kd4, PID::Direct);

// Set the shield settings
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };

char ssid[] = "aterm-ed3780-g";
char password[] = "1eb5316d2fa8c";
unsigned long recv_cnt = 0;

// use a ring buffer to increase speed and reduce memory allocation
unsigned int localPort = 11411;  // local port to listen on
int16_t Arr[4];
unsigned long watch_dog;
unsigned long soft_timer;

IPAddress server(192, 168, 1, 3); // e.g.: IPAddress server(192, 168, 1, 3);
IPAddress local(192, 168, 1, 1); // e.g.: IPAddress server(192, 168, 1, 3);
const uint16_t serverPort = 11411;
void controlCallback( const std_msgs::Int16MultiArray& msg);
ros::Subscriber<std_msgs::Int16MultiArray> sub("servo_controls", &controlCallback );
uint32_t last_time = 0;

ros::NodeHandle nh;

void controlCallback( const std_msgs::Int16MultiArray& msg)
{

  recv_cnt++;
  watch_dog = millis();
  Serial.print(recv_cnt, DEC);
  Serial.println(" Recieve Topic.");
  for (int i = 0; i < 4; ++i)
  {
    Arr[i] = msg.data[i];
  }
  /*
    if (Arr[0] >= 0)
      FR_fwd(Arr[0]);
    else
      FR_bck(abs(Arr[0]));

    if (Arr[1] >= 0)
      FL_fwd(Arr[1]);
    else
      FL_bck(abs(Arr[1]));

    if (Arr[2] >= 0)
      RR_fwd(Arr[2]);
    else
      RR_bck(abs(Arr[2]));

    if (Arr[3] >= 0)
      RL_fwd(Arr[3]);
    else
      RL_bck(abs(Arr[3]));
  */
}

void flash()
{
  int_count++;
  aState1 = digitalRead(ENC1A); // Reads the "current" state of the outputA
  // If the previous and the current state of the outputA are different, that means a Pulse has occured
  if (aState1 != aLastState1)
  {
    // If the outputB state is different to the outputA state, that means the encoder is rotating clockwise
    bState1 = digitalRead(ENC1B);
    if (bState1 != aState1)
      counter1 ++;
    else
      counter1 --;

    //Serial.print("Position1: ");
    //Serial.println(counter1);
  }
  aLastState1 = aState1; // Updates the previous state of the outputA with the current state

  aState2 = digitalRead(ENC2A); // Reads the "current" state of the outputA
  // If the previous and the current state of the outputA are different, that means a Pulse has occured
  if (aState2 != aLastState2)
  {
    // If the outputB state is different to the outputA state, that means the encoder is rotating clockwise
    bState2 = digitalRead(ENC2B);
    if (bState2 != aState2)
      counter2 ++;
    else
      counter2 --;

    //Serial.print("Position2: ");
    //Serial.println(counter2);
  }
  aLastState2 = aState2; // Updates the previous state of the outputA with the current state

  aState3 = digitalRead(ENC3A); // Reads the "current" state of the outputA
  // If the previous and the current state of the outputA are different, that means a Pulse has occured
  if (aState3 != aLastState3)
  {
    // If the outputB state is different to the outputA state, that means the encoder is rotating clockwise
    bState3 = digitalRead(ENC3B);
    if (bState3 != aState3)
      counter3 ++;
    else
      counter3 --;

    //Serial.print("Position3: ");
    //Serial.println(counter3);
  }
  aLastState3 = aState3; // Updates the previous state of the outputA with the current state

  aState4 = digitalRead(ENC4A); // Reads the "current" state of the outputA
  // If the previous and the current state of the outputA are different, that means a Pulse has occured
  if (aState4 != aLastState4)
  {
    // If the outputB state is different to the outputA state, that means the encoder is rotating clockwise
    bState4 = digitalRead(ENC4B);
    if (bState4 != aState4)
      counter4 ++;
    else
      counter4 --;

    //Serial.print("Position4: ");
    //Serial.println(counter4);
  }
  aLastState4 = aState4; // Updates the previous state of the outputA with the current state

  Input1 = (counter1 - counter1_last);
  speed1 = (int)Input1;
  Output1 = myPID1.Run(Input1);
  counter1_last = counter1;

  Input2 = (counter2 - counter2_last);
  speed2 = (int)Input2;
  Output2 = myPID2.Run(Input2);
  counter2_last = counter2;

  Input3 = (counter3 - counter3_last);
  speed3 = (int)Input3;
  Output3 = myPID3.Run(Input3);
  counter3_last = counter3;

  Input4 = (counter4 - counter4_last);
  speed4 = (int)Input4;
  Output4 = myPID4.Run(Input4);
  counter4_last = counter4;

  speed1_sum += speed1;
  speed2_sum += speed2;
  speed3_sum += speed3;
  speed4_sum += speed4;

  if ((int_count % SPEED_COUNT) == 0)
  {
    speed1_rpm = (int)((double)speed1_sum);
    speed1_sum = 0;
    speed2_rpm = (int)((double)speed2_sum);
    speed2_sum = 0;
    speed3_rpm = (int)((double)speed3_sum);
    speed3_sum = 0;
    speed4_rpm = (int)((double)speed4_sum);
    speed4_sum = 0;

  }


  if (Output1 > 0.0)
    FL_fwd((int)Output1);
  else
    FL_bck(abs((int)Output1));

  if (Output2 > 0.0)
    FR_fwd((int)Output2);
  else
    FR_bck(abs((int)Output2));

  if (Output3 > 0.0)
    RL_fwd((int)Output3);
  else
    RL_bck(abs((int)Output3));

  if (Output4 > 0.0)
    RR_fwd((int)Output4);
  else
    RR_bck(abs((int)Output4));
}

void setup()
{
  init_GPIO();

  Serial.begin(115200);
  // Connect the Ethernet
  Ethernet.begin(mac, local);

  // Let some time for the Ethernet Shield to be initialized
  delay(1000);

  Serial.println("");
  Serial.println("Ethernet connected");
  Serial.print("IP address: ");
  Serial.println(Ethernet.localIP());

  // Set the connection to rosserial socket server
  nh.getHardware()->setConnection(server, serverPort);

  Serial.println("You're connected to the network");
  //printWifiStatus();

  Serial.print("Listening on port ");
  Serial.println(localPort);
  Serial.println(" connected");

  aLastState1 = digitalRead(ENC1A);
  aLastState2 = digitalRead(ENC2A);
  aLastState3 = digitalRead(ENC3A);
  aLastState4 = digitalRead(ENC4A);

  myPID1.Start(0, 0, 0);
  myPID1.SetSampleTime(SAMPLE_TIME);
  myPID1.SetOutputLimits(-250, 250);

  myPID2.Start(0, 0, 0);
  myPID2.SetSampleTime(SAMPLE_TIME);
  myPID2.SetOutputLimits(-250, 250);

  myPID3.Start(0, 0, 0);
  myPID3.SetSampleTime(SAMPLE_TIME);
  myPID3.SetOutputLimits(-250, 250);

  myPID4.Start(0, 0, 0);
  myPID4.SetSampleTime(SAMPLE_TIME);
  myPID4.SetOutputLimits(-250, 250);

  delay(1000);

  MsTimer2::set(SAMPLE_TIME, flash);
  MsTimer2::start();

  nh.initNode();
  nh.subscribe(sub);
}


void loop()
{
  //  Setpoint1 = SPEED_CMD1;
  //  Setpoint2 = SPEED_CMD2;
  //  Setpoint3 = SPEED_CMD3;
  //  Setpoint4 = SPEED_CMD4;
  Setpoint1 = Arr[0];
  Setpoint2 = Arr[1];
  Setpoint3 = Arr[2];
  Setpoint4 = Arr[3];
  myPID1.Setpoint(Setpoint1);
  myPID2.Setpoint(Setpoint2);
  myPID3.Setpoint(Setpoint3);
  myPID4.Setpoint(Setpoint4);


  //flash();

  //    if ((millis() - watch_dog) > 1500)
  //      stop_Stop();
  Serial.print("Output1 : ");
  Serial.println(Output1);
  Serial.print("Output2 : ");
  Serial.println(Output2);
  Serial.print("Output3 : ");
  Serial.println(Output3);
  Serial.print("Output4 : ");
  Serial.println(Output4);
  Serial.println("**********");

  Serial.print("Speed 1 : ");
  Serial.println(speed1_rpm);
  Serial.print("Speed 2 : ");
  Serial.println(speed2_rpm);
  Serial.print("Speed 3 : ");
  Serial.println(speed3_rpm);
  Serial.print("Speed 4 : ");
  Serial.println(speed4_rpm);
  Serial.println("**********");


  nh.spinOnce();
  delay(1);
}